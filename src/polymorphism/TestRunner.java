package polymorphism;

/**
 * Created by green on 21.07.2015.
 *
 * В процессе выполнения приложения будет случайным образом сформиро-
 ван массив-тест из вопросов разного типа, и информация об ответах на них
 будет выведена на консоль.
 Класс QuestFactory содержит метод getQuestFromFactory(int numMode),
 который возвращает ссылку на случайно выбранный объект подкласса класса
 AbstractQuest каждый раз, когда он вызывается. Приведение к базовому типу
 производится оператором return, который возвращает ссылку на DragnDropQuest
 или SingleChoiceQuest. Метод main() содержит массив из ссылок AbstractQuest,
 заполненный с помощью вызова getQuestFromFactory(). На этом этапе извест-
 но, что имеется некоторое множество ссылок на объекты базового типа и ничего
 больше (не больше, чем знает компилятор). Kогда происходит перемещение
 по этому массиву, метод check() вызывается для каждого случайным образом
 выбранного объекта.
 Если понадобится в дальнейшем добавить в систему, например, класс
 MultiplyChoiceQuest, то это потребует только переопределения метода check()
 и добавления одной строки в код метода getQuestFromFactory(), что делает
 систему легко расширяемой.
 Невозможно приравнивать ссылки на классы, находящиеся в разных ветвях
 наследования, так как не существует никакого способа привести один такой
 тип к другому.
 */
public class TestRunner {
    public static void main(String[ ] args) {
        TestAction bt = new TestAction();
        AbstractQuest[ ] test = bt.generateTest(60, 2); // 60 вопросов 2-х видов
// здесь должен быть код процесса прохождения теста …
        bt.checkTest(test); // проверка теста
    }
}


