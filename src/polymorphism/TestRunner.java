package polymorphism;

/**
 * Created by green on 21.07.2015.
 *
 * ¬ процессе выполнени€ приложени€ будет случайным образом сформиро-
 ван массив-тест из вопросов разного типа, и информаци€ об ответах на них
 будет выведена на консоль.
  ласс QuestFactory содержит метод getQuestFromFactory(int numMode),
 который возвращает ссылку на случайно выбранный объект подкласса класса
 AbstractQuest каждый раз, когда он вызываетс€. ѕриведение к базовому типу
 производитс€ оператором return, который возвращает ссылку на DragnDropQuest
 или SingleChoiceQuest. ћетод main() содержит массив из ссылок AbstractQuest,
 заполненный с помощью вызова getQuestFromFactory(). Ќа этом этапе извест-
 но, что имеетс€ некоторое множество ссылок на объекты базового типа и ничего
 больше (не больше, чем знает компил€тор). Kогда происходит перемещение
 по этому массиву, метод check() вызываетс€ дл€ каждого случайным образом
 выбранного объекта.
 ≈сли понадобитс€ в дальнейшем добавить в систему, например, класс
 MultiplyChoiceQuest, то это потребует только переопределени€ метода check()
 и добавлени€ одной строки в код метода getQuestFromFactory(), что делает
 систему легко расшир€емой.
 Ќевозможно приравнивать ссылки на классы, наход€щиес€ в разных ветв€х
 наследовани€, так как не существует никакого способа привести один такой
 тип к другому
 */
public class TestRunner {
    public static void main(String[ ] args) {
        TestAction bt = new TestAction();
        AbstractQuest[ ] test = bt.generateTest(60, 2); // 60 вопросов 2-х видов
// здесь должен быть код процесса прохождени€ теста Е
        bt.checkTest(test); // проверка теста
    }
}
