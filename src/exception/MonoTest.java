package exception;

/**
 * Created by green on 31.07.2015.
 *
 *  Борьба за качество программ ведется всеми возможными способами. На этапе
 отладки найти неявные ошибки в функционировании приложения бывает довольно
 сложно. Например, в методе, устанавливающем возраст пользователя, информация
 о возрасте извлекается из внешних источников (файл, БД), и в результате получает-
 ся отрицательное значение. Далее неверные данные влияют на результат вычисле-
 ния среднего возраста пользователей и т. д. Определять и исправлять
 такие ситуа-
 ции позволяет механизм проверочных утверждений (assertion). При помощи этого
 механизма можно сформулировать требования к входным, выходным и промежу-
 точным данным методов классов в виде некоторых логических условий.

 Выражение boolexp может принимать только значение типов boolean или
 Boolean, а expression — любое значение, которое может быть преобразовано
 к строке. Если логическое выражение получает значение false, то генерируется
 исключение AssertionError и выполнение программы прекращается с выво-
 дом на консоль значения выражения expression (если оно задано).
 Механизм assertion хорошо подходит для проверки инвариантов, например,
 перечислений:
 */
public class MonoTest {
    public static void main(String[] args) {
        String str = "WHITE"; // "GRAY"
        Mono mono = Mono.valueOf(str);
// more code
        switch (mono) {
            case WHITE : // more code
                break;
            case BLACK : // more code
                break;
            default :
                assert false : "Colored!";
        }
    }
    }


/*
Создатели языка не рекомендуют использовать assertion при проверке параметров
public-методов. В таких ситуациях лучше обрабатывать возможность генера-
ции исключения одного из типов: IllegalArgumentException, NullPointerException
или собственное исключение. Нет также особого смысла в механизме assertion
при проверке пограничных значений переменных, поскольку исключительные
ситуации генерируются в этом случае без посторонней помощи.
Механизм assertion можно включать для отдельных классов и пакетов при
запуске виртуальной машины в виде:
java -enableassertions RunnerClass
или
java -ea RunnerClass
Для выключения применяется -da или -disableassertions.
 */
