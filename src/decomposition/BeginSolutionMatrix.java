package decomposition;

/**
 * Created by green on 18.07.2015.
 *
 * Объяснение принципов декомпозиции можно рассмотреть на простейшем
 примере. Пусть требуется решить следующую задачу: создать систему, позво-
 ляющую умножать целочисленные матрицы друг на друга.
 Начинающий программист, знающий о том, что существуют классы, кон-
 структоры и методы, может предложить решение поставленной проблемы
 в следующем виде:

 */
public class BeginSolutionMatrix {

    private int[ ][ ] a;
    private int n;
    private int m;
    public BeginSolutionMatrix(int nn, int mm) {
        n = nn;
        m = mm;
// создание и заполнение случайными значениями
        a = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                a[i][j] = (int)(Math.random() * 5);
            }
        }
        show();
    }
    public BeginSolutionMatrix(int nn, int mm, int k) {
        n = nn;
        m = mm;
        a = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                a[i][j] = k;
            }
        }
        if(k != 0) {
            show();
        }
    }
    public void show() {
        System.out.println("Maтрица : " + a.length + " на " + a[0].length);
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[0].length; j++) {
                System.out.print(a[i][j] + " ");
            }
            System.out.println();
        }
    }
    public static void main(String[ ] args) {
        int n = 2, m = 3, l = 4;
        BeginSolutionMatrix p = new BeginSolutionMatrix(n, m);
        BeginSolutionMatrix q = new BeginSolutionMatrix(m, l);
        BeginSolutionMatrix r = new BeginSolutionMatrix(n, l, 0);
        for (int i = 0; i < p.a.length; i++) {
            for (int j = 0; j < q.a[0].length; j++) {
                for (int k = 0; k < p.a[0].length; k++) {
                    r.a[i][j] += p.a[i][k] * q.a[k][j];
                }
            }
        }
        System.out.println("Произведение матриц: ");
        r.show();
    }
}

/*
Программа полностью работоспособна, но следует взглянуть на нее внима-
тельнее:
• создан только один класс; маловато, но и задача невелика;
• класс обладает лишними полями, значения которых зависят от значений
других полей;
• в классе объявлены два конструктора, оба выделяют память под матрицу
и заполняют ее элементами, переданными или сгенерированными. Оба кон-
структора решают похожие задачи и не проверяют на корректность входные
значения и решают слишком обширные задачи;
• определен метод show() для вывода матрицы на консоль, что ограничивает
способы общения класса с внешними для него классами;
• задача умножения решается в методе main(), и класс является одноразовым,
т. е. для умножения двух других матриц придется код умножения копиро-
вать в другое место;
• реализован только основной положительный сценарий, например, не вы-
полняется проверка размерности при умножении, и, как следствие, отсутст-
вует реакция приложения на некорректные данные.
Ниже приведена попытка переработки (рефакторинга) созданного приложе-
ния таким образом, чтобы существовала возможность поддержки и расшире-
ния возможности системы при возникновении сопутствующих задач.
 */